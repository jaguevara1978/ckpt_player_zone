angular.module( 'app' ).directive( 'bsActiveLink', [ '$location', function ( $location ) {    return {        restrict: 'A', //use as attribute         replace: false,        link: function ( scope, elem ) {            //after the route has changed            scope.$on("$routeChangeSuccess", function () {                var hrefs = ['/#' + $location.path( ),                             '#' + $location.path( ), //html5: false                             $location.path( ) ]; //html5: true                angular.forEach( elem.find( 'a' ), function ( a ) {                    a = angular.element( a );                    if ( -1 !== hrefs.indexOf( a.attr( 'href' ) ) ) {                        a.parent( ).addClass( 'cd-selected' );                    } else {                        a.parent( ).removeClass( 'cd-selected' );                       };                });                updateSelectedNav( );              });        }    };} ] );angular.module( 'app' ).directive( 'attrs', function( ) {    return {        link: function( scope, element, attrs ) {            var attr = angular.copy( scope.$eval( attrs.attrs ) );            if ( attr != undefined & attr != null ) {                element.attr( attr, null );                console.log( 'element.attr( attr )', element.attr( attr ) );//                 element.attr( attrs ).html( attrs );            }        }    };} );/** * This directive takes an attribute object or string and adds it to the element *   before compilation is done. It doesn't remove any attributes, so all *   pre-added attributes will remain. * *  @param {Object<String, String>?} attributes - object of attributes and values */angular.module( 'app' ).directive( 'attributes', function attributesDirective( $compile, $parse ) {    return {        priority: Infinity,        terminal: true,        restrict: 'A',        compile: function attributesCompile( ) {            return function attributesLink( $scope, element, attributes ) {                function parseAttr( key, value ) {                    function convertToDashes( match ) {                        return match[ 0 ] + '-' + match[ 1 ].toLowerCase( );                    }                    attributes.$set( key.replace( /([a-z][A-Z])/g, convertToDashes ), value !== undefined && value !== null ? value : '' );                }                var passedAttributes = $parse( attributes.attributes )( $scope );                if ( passedAttributes !== null && passedAttributes !== undefined ) {                    if ( typeof passedAttributes === 'object' ) {                        for ( var subkey in passedAttributes ) {                            parseAttr( subkey, passedAttributes[ subkey ] );                        }                    } else if ( typeof passedAttributes === 'string' ) {                        parseAttr( passedAttributes, null );                    }                }                $compile(element, null, Infinity)($scope);            };        }    };});angular.module( 'app' ).directive( 'proxy', [ '$parse', '$injector', '$compile', function ( $parse, $injector, $compile ) {return {    replace: true,    link: function ( scope, element, attrs ) {        var nameGetter = $parse( attrs.proxy );        var name = nameGetter( scope );        var value = undefined;        if ( attrs.proxyValue ) {          var valueGetter = $parse( attrs.proxyValue );          value = valueGetter( scope );        }        var directive = $injector.get( name.id + 'Directive' )[ 0 ];        if ( value !== undefined ) {            attrs[ name.id ] = value;        }        var a = $compile( directive.template )( scope );        console.log( 'directive', directive );        element.replaceWith( a );    }} } ] );